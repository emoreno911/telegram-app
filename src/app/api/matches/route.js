import { NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

// Supabase Methods
const supabase = createClient(
    process.env.SUPABASE_URL, 
    process.env.SUPABASE_ANON
);

const tableName = "gtb_matches"

async function getMatches(nft_id) {
    const cols = "match_id, nft_id, username, points, avg_time, cat_id, cat_name, created_at"
    try {
        const { data, error, status } = await supabase
            .from(tableName)
            .select(cols)
            .eq('nft_id', nft_id)
            .order("created_at", {ascending: false})
            .limit(10);

        if (error && status !== 406) {
            console.log(nft_id, error)
            return {
                error: true,
                data: null
            }
        }

        return {
            error: false,
            data
        }        
    } catch (error) {
        console.log(nft_id, error)
        return {
            error: true,
            data: null
        }
    }
}

async function getPointsAndAvg(nft_id) {
    const cols = "points, avg_time"
    try {
        const { data, error, status } = await supabase
            .from(tableName)
            .select(cols)
            .eq('nft_id', nft_id);

        if (error && status !== 406) {
            console.log(nft_id, error)
            return {
                error: true,
                data: null
            }
        }

        return {
            error: false,
            data
        }        
    } catch (error) {
        console.log(nft_id, error)
        return {
            error: true,
            data: null
        }
    }
}

// match_id[autogenerated], nft_id, username, points, avg_time, cat_id, cat_name
async function insertMatch(data) {
    // remove null properties for the update
    const cleanData = Object.fromEntries(
        Object.entries(data).filter(([_, value]) => value != null)
    );

    try {
        const { error } = await supabase
            .from(tableName)
            .insert(cleanData)

        if (error) {
            console.log(data.nft_id, error)
            return {
                error: true,
                data: null
            }
        }

        return {
            error: false,
            data: ""
        }        
    } catch (error) {
        console.log(data.nft_id, error)
        return {
            error: true,
            data: null
        }
    }
}

export async function GET(req) {
    const { searchParams} = new URL(req.url);
    const isLast = searchParams.get("last");
    const nftId = searchParams.get("nft_id");
    
    const result = isLast !== null ? 
        await getMatches(nftId) : 
        await getPointsAndAvg(nftId);

    return NextResponse.json(result)
}

export async function POST(req) {
    const data = await req.json();
    const result = await insertMatch(data)
    return NextResponse.json(result)
}